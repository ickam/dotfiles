[user]
	name = Luke Randall
	email = luke.randall@gmail.com

[diff]
	renames = true
	tool = Kaleidoscope

[color]
	branch = auto
  	diff = auto
	status = auto
	ui = auto
[color "branch"]
	current = magenta
	local = yellow
	remote = green
[color "diff"]
	meta = yellow
	frag = magenta
	old = red
	new = green
[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[alias]
	br = branch
	ci = commit
	co = checkout
	ma = checkout master
	pr = checkout production
	st = status
	staged = diff --staged
        pruneremote = remote prune origin
        pus = push
        puhs = push

	# show difference between working tree and the index
	unstaged = diff

	# show staged and unstaged changes (what would be committed with "git commit -a")
	both = diff HEAD
        df = diff --color --color-words --abbrev
        st = status -s
        l = log --graph --pretty=oneline --abbrev-commit --decorate

[core]
	editor = vim
	excludesfile = /Users/luke/.gitignore_global
[push]
	default = current
[branch]
	autosetuprebase = always
[difftool "Kaleidoscope"]
	cmd = ksdiff-wrapper git \"$LOCAL\" \"$REMOTE\"
[difftool]
	prompt = false
[interactive]
        singlekey = true
[merge]
        summary = true

# url shortcuts

[url "git://github.com/"]
        # Read-only
        insteadOf = gh:

[url "git@github.com:"]
        # With write access
        insteadOf = wgh:

[url "git@heroku.com:"]
        insteadOf = heroku:

# merge strategies

[merge "railsschema"]
        name = newer Rails schema version
                  driver = "ruby -e '\n\
                  system %(git), %(merge-file), %(--marker-size=%L), %(%A), %(%O), %(%B)\n\
                  b = File.read(%(%A))\n\
                  b.sub!(/^<+ .*\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n=+\\nActiveRecord::Schema\\.define.:version => (\\d+). do\\n>+ .*/) do\n\
                    %(ActiveRecord::Schema.define(:version => #{[$1, $2].max}) do)\n\
                  end\n\
                  File.open(%(%A), %(w)) {|f| f.write(b)}\n\
                  exit 1 if b.include?(%(<)*%L)'"
